from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy import create_engine, Column, String, Integer
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session
from pydantic import BaseModel
from datetime import datetime, timedelta
import os
from dotenv import load_dotenv
import telegram
import asyncio
from typing import Optional

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
SQLALCHEMY_DATABASE_URL = "sqlite:///./notifications.db"
engine = create_engine(SQLALCHEMY_DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# –ú–æ–¥–µ–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
class UserSubscription(Base):
    __tablename__ = "user_subscriptions"
    
    id = Column(Integer, primary_key=True, index=True)
    github_username = Column(String, unique=True, index=True)
    telegram_chat_id = Column(String, unique=True, index=True)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
Base.metadata.create_all(bind=engine)

# Pydantic –º–æ–¥–µ–ª–∏
class SubscriptionCreate(BaseModel):
    github_username: str
    telegram_chat_id: str

# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ë–î
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telegram.Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å–æ–∫
boards_data = {}

@app.post("/subscribe")
async def subscribe(subscription: SubscriptionCreate, db: Session = Depends(get_db)):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
    existing = db.query(UserSubscription).filter(
        UserSubscription.github_username == subscription.github_username
    ).first()
    
    if existing:
        raise HTTPException(status_code=400, detail="User already subscribed")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    db_subscription = UserSubscription(
        github_username=subscription.github_username,
        telegram_chat_id=subscription.telegram_chat_id
    )
    db.add(db_subscription)
    db.commit()
    
    return {"message": "Successfully subscribed"}

@app.post("/send-notification")
async def send_notification(github_username: str, task_name: str, deadline: str):
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        subscription = db.query(UserSubscription).filter(
            UserSubscription.github_username == github_username
        ).first()
        
        if not subscription:
            raise HTTPException(status_code=404, detail="User not found")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        message = f"‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ!\n\n–ó–∞–¥–∞—á–∞: {task_name}\n–°—Ä–æ–∫: {deadline}"
        await bot.send_message(chat_id=subscription.telegram_chat_id, text=message)
        
        return {"message": "Notification sent"}
    finally:
        db.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def check_and_send_notifications():
    while True:
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
            subscriptions = db.query(UserSubscription).all()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ localStorage
            boards_data = {}  # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –¥–æ—Å–æ–∫
            
            for subscription in subscriptions:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                for board in boards_data.values():
                    for column in board.get('columns', []):
                        for card in column.get('cards', []):
                            if not card.get('date'):
                                continue
                                
                            deadline = datetime.strptime(card['date'], '%Y-%m-%d')
                            tomorrow = datetime.now() + timedelta(days=1)
                            
                            # –ï—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω –∑–∞–≤—Ç—Ä–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                            if deadline.date() == tomorrow.date():
                                try:
                                    message = (
                                        f"‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ!\n\n"
                                        f"–ó–∞–¥–∞—á–∞: {card['text']}\n"
                                        f"–ö–æ–ª–æ–Ω–∫–∞: {column['title']}\n"
                                        f"–°—Ä–æ–∫: {card['date']} {card.get('time', '09:00')}\n"
                                    )
                                    if card.get('description'):
                                        message += f"\n–û–ø–∏—Å–∞–Ω–∏–µ: {card['description']}"
                                        
                                    await bot.send_message(
                                        chat_id=subscription.telegram_chat_id,
                                        text=message
                                    )
                                except Exception as e:
                                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        finally:
            db.close()
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
        await asyncio.sleep(3600)

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
@app.on_event("startup")
async def startup_event():
    asyncio.create_task(check_and_send_notifications())

@app.post("/sync-boards")
async def sync_boards(boards: dict):
    global boards_data
    boards_data = boards
    return {"message": "Boards synchronized successfully"}

@app.post("/test-notification")
async def test_notification():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
        db = SessionLocal()
        subscriptions = db.query(UserSubscription).all()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫—É
        for sub in subscriptions:
            await bot.send_message(
                chat_id=sub.telegram_chat_id,
                text="üîî –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!\n\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."
            )
        
        return {"status": "success", "message": "–¢–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã"}
    except Exception as e:
        return {"status": "error", "message": str(e)}
    finally:
        db.close() 